{"version":3,"sources":["app.js","environment.js","main.js","home/index.js","game/create.js","game/join.js","highscore/highscore-table.js","highscore/highscore.js","lobby/lobby.js","question/question.js","services/game-hub-singleton.js","services/signalr-service.js","resources/index.js","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/app.html","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/game/create.html","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/game/join.html","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/highscore/highscore-table.html","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/highscore/highscore.html","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/home/index.html","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/lobby/lobby.html","D:/projects/wedding-quiz/backend/MrAndMrs.App3/wwwroot/src/question/question.html"],"names":["App","message","configureRouter","config","router","title","map","route","name","moduleId","debug","testing","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","client","index","inject","theRouter","activate","$","click","post","userName","val","text","ajax","url","method","data","createGame","console","log","game","JSON","parse","response","navigateToRoute","gameId","create","signalrService","eventAggregator","questions","playerlist","questionsModel","newQuestionText","params","self","window","localStorage","setItem","verifyConnected","i","length","push","editActive","editAction","changeEditState","subscribe","updatedPlayerList","startGame","isModerator","par","addQuestion","questionToCreate","rawQuestions","question","updateQuestions","join","guid","s4","Math","floor","random","toString","substring","joinGame","accountKey","getItem","postParams","username","createRequest","asPost","withHeader","withContent","send","result","Storage","alert","state","showHighscore","HighscoreTableCustomElement","highscore","isFinished","currentQuestion","highscoreTableModel","Entries","names","score","answerStatistics","mrs","mr","both","currentQuestionIndex","statistics","playerList","totalPlayers","getHighscore","calculatePercentage","count","total","isLastQuestion","selectedAnswer","updatedQuestionIndex","questionIndex","info","nextQuestion","endGame","selectAnswer","answer","GameHubSingleton","hub","createGameHub","connection","createHubProxy","qs","logging","SignalrService","gameHub","getGameId","promise","resolve","reject","instance","on","updatedPlayerlist","publish","done","invoke","server","showNextQuestion"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\r\n    constructor() {\r\n        this.message = 'Hello World!';\r\n    }\r\n\r\n    configureRouter(config, router) {\r\n        this.router = router;\r\n        config.title = 'Mr & Mrs';\r\n        config.map([\r\n            { route: ['', 'home'], name: 'home', moduleId: 'home/index' },\r\n            { route: ['/game/create'], name: 'gameCreation', moduleId: 'game/create' },\r\n            { route: ['/game/join'], name: 'game', moduleId: 'game/join' },\r\n            { route: ['/question/question'], name: 'question', moduleId: 'question/question' },\r\n            { route: ['/highscore'], name: 'highscore', moduleId: 'highscore/highscore' },\r\n            { route: ['/lobby'], name: 'lobby', moduleId: 'lobby/lobby' }\r\n            // { route: 'users', name: 'users', moduleId: 'users/index', nav: true },\r\n            // { route: 'users/:id/detail', name: 'userDetail', moduleId: 'users/detail' },\r\n            // { route: 'files*path', name: 'files', moduleId: 'files/index', href: '#files', nav: true }\r\n        ]);\r\n    }\r\n}\r\n","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import environment from './environment';\r\n\r\n//Configure Bluebird Promises.\r\n//Note: You may want to use environment-specific configuration.\r\nPromise.config({\r\n  warnings: {\r\n    wForgottenReturn: false\r\n  }\r\n});\r\n\r\nexport function configure(aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .router()\r\n    .feature('resources');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","import { HttpClient } from \"aurelia-http-client\";\r\nimport { Router } from 'aurelia-router';\r\n\r\nlet client = new HttpClient();\r\n\r\nexport class index {\r\n\r\n    static inject() { return [Router]; }\r\n\r\n    constructor(router) {\r\n        this.theRouter = router;\r\n    }\r\n\r\n    activate() {\r\n        $(\"#publishPostButton\").click(function () {\r\n\r\n            const post = {\r\n                userName: $(\"#userNameInput\").val() || \"Guest\",\r\n                text: $(\"#textInput\").val()\r\n            };\r\n            $.ajax({\r\n                url: \"/api/Posts/AddPost\",\r\n                method: \"POST\",\r\n                data: post\r\n            });\r\n        });\r\n    }\r\n\r\n    createGame() {\r\n        console.log(\"create game start\");\r\n\r\n        client.post(\"/game/create\")\r\n            .then(data => {\r\n                var game = JSON.parse(data.response);\r\n                console.log(\"created game on server\", game);\r\n                this.theRouter.navigateToRoute(\"gameCreation\", { gameId: game.gameId });\r\n            });\r\n    }\r\n}","import { SignalrService } from 'services/signalr-service';\r\nimport { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { Router } from 'aurelia-router';\r\n\r\n@inject(SignalrService, EventAggregator, Router)\r\nexport class create {\r\n    constructor(signalrService, eventAggregator, router) {\r\n        this.message = 'Hello World!';\r\n        this.playerlist = [\"Noch keine Spieler\"];\r\n        this.signalrService = signalrService;\r\n        this.eventAggregator = eventAggregator;\r\n        this.router = router;\r\n        this.questionsModel = [];\r\n        this.newQuestionText = \"\";\r\n    }\r\n\r\n    questions = [];\r\n\r\n    activate(params) {\r\n        var self = this;\r\n        this.gameId = params.gameId;\r\n\r\n\r\n        console.log(\"questions model is\", this.questionsModel);\r\n\r\n        window.localStorage.setItem(\"username\", \"moderator\");\r\n        window.localStorage.setItem(\"currentGame\", this.gameId);\r\n        window.localStorage.setItem(\"isModerator\", true);\r\n\r\n\r\n        this.signalrService.verifyConnected(this.gameId)\r\n            .then((game) => {\r\n                self.game = game;\r\n                self.questions = game.questions;\r\n\r\n                for (var i = 0; i < self.questions.length; i++) {\r\n                    self.questionsModel.push({\r\n                        text: self.questions[i],\r\n                        editActive: false,\r\n                        editAction: self.changeEditState\r\n                    });\r\n                }\r\n\r\n                this.eventAggregator.subscribe('playerListUpdated', (updatedPlayerList) => {\r\n                    console.log(\"we should update playerlist now for moderator view.\")\r\n                    console.log(updatedPlayerList);\r\n                    self.playerlist = updatedPlayerList;\r\n                });\r\n            });\r\n    }\r\n\r\n    startGame() {\r\n        var self = this;\r\n        this.signalrService.startGame(self.game.gameId)\r\n            .then(() => {\r\n                console.log(\"change view now\");\r\n                self.router.navigateToRoute(\"question\", {\r\n                    isModerator: true,\r\n                    gameId: self.game.gameId\r\n                });\r\n            });\r\n    }\r\n\r\n    //------------------ question list ---->\r\n\r\n    changeEditState(par) {\r\n        this.editActive = !this.editActive;\r\n    }\r\n\r\n    addQuestion() {\r\n        let self = this;\r\n        let questionToCreate = {\r\n            text: this.newQuestionText,\r\n            editActive: false,\r\n            editAction: this.changeEditState\r\n        };\r\n\r\n\r\n        this.questionsModel.push(questionToCreate);\r\n\r\n        var rawQuestions = this.questionsModel.map(function (question) {\r\n            return question.text;\r\n        });\r\n        console.log(\"questions to update:\", rawQuestions);\r\n\r\n        this.signalrService.updateQuestions(rawQuestions).then(() => {\r\n            console.log(\"questions updated on server\")\r\n            self.newQuestionText = \"\";\r\n        });\r\n    }\r\n}\r\n","import { HttpClient } from \"aurelia-http-client\";\r\nimport { Router } from 'aurelia-router';\r\n\r\nexport class join {\r\n\r\n    static inject() { return [Router]; }\r\n\r\n    constructor(router) {\r\n        this.name = \"\";\r\n        this.gameId = \"\";\r\n        this.theRouter = router;\r\n    }\r\n\r\n    guid() {\r\n        return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' +\r\n            this.s4() + '-' + this.s4() + this.s4() + this.s4();\r\n    }\r\n\r\n    s4() {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16)\r\n            .substring(1);\r\n    }\r\n\r\n    joinGame() {\r\n        var client = new HttpClient();\r\n\r\n        var accountKey = window.localStorage.getItem(\"accountKey\");\r\n        if(!accountKey){\r\n            accountKey = this.guid();\r\n            window.localStorage.setItem(\"accountKey\", accountKey);\r\n        }\r\n\r\n        var postParams = {\r\n            username: this.name,\r\n            gameId: this.gameId,\r\n            accountKey : accountKey\r\n        };\r\n\r\n        console.log(\"try to join game\", postParams);\r\n\r\n        client.createRequest(\"/game/join\")\r\n            .asPost()\r\n            .withHeader('Content-Type', 'application/json; charset=utf-8')\r\n            .withContent(postParams)\r\n            .send()\r\n            .then(data => {\r\n                var result = JSON.parse(data.response);\r\n                console.log(\"result\", result);\r\n\r\n                if (result.result === \"allow_connection\") {\r\n                    if (typeof (Storage) !== \"undefined\") {\r\n                        // Code for localStorage/sessionStorage.\r\n                        window.localStorage.setItem(\"username\", postParams.username);\r\n                        window.localStorage.setItem(\"currentGame\", result.game.gameId);\r\n                        window.localStorage.setItem(\"isModerator\", false);\r\n                    } else {\r\n                        alert(\"Sorry, no support for your browser.\")\r\n                        return;\r\n                    }\r\n\r\n                    // -> lobby\r\n                    if (result.game.state === 0) {\r\n                        this.theRouter.navigateToRoute(\"lobby\", {\r\n                            gameId: result.game.gameId,\r\n                            username: postParams.username\r\n                        });\r\n                    }\r\n\r\n                    // -> question\r\n                    if (result.game.state === 1) {\r\n                        this.theRouter.navigateToRoute(\"question\", {\r\n                            gameId: result.game.gameId,\r\n                        });\r\n                    }\r\n\r\n                    // -> question\r\n                    if (result.game.state === 2) {\r\n                        this.theRouter.navigateToRoute(\"highscore\", {\r\n                            gameId: result.game.gameId,\r\n                        });\r\n                    }\r\n\r\n\r\n                } else {\r\n                    alert(result.result);\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    showHighscore() {\r\n        this.theRouter.navigateToRoute(\"highscore\", {\r\n            gameId: this.gameId,\r\n        });\r\n    }\r\n\r\n}\r\n","import { bindable } from 'aurelia-framework';\r\n\r\nexport class HighscoreTableCustomElement {\r\n  @bindable model;\r\n}\r\n\r\n","import { HttpClient } from \"aurelia-http-client\";\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { SignalrService } from 'services/signalr-service';\r\nimport { inject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\nimport {computedFrom} from 'aurelia-framework';\r\n\r\n@inject(SignalrService, EventAggregator, Router)\r\nexport class highscore {\r\n    constructor(signalrService, eventAggregator, router) {\r\n        this.message = 'Hello World!';\r\n        this.isFinished = false;\r\n        this.eventAggregator = eventAggregator;\r\n        this.signalrService = signalrService;\r\n        this.currentQuestion = \"test\";\r\n        this.highscoreTableModel = {\r\n            Entries: [{\r\n                names: \"?\",\r\n                score: \"?\"\r\n            }],\r\n        };\r\n\r\n        this.answerStatistics = {\r\n            mrs: 0,\r\n            mr: 0,\r\n            both: 0\r\n        };\r\n    }\r\n\r\n    activate(params) {\r\n        var self = this;\r\n\r\n\r\n        this.eventAggregator.subscribe(\"highscoreUpdated\", function (highscore) {\r\n            console.log(\"highscore should be updated.\", highscore);\r\n            self.highscoreTableModel = highscore;\r\n        });\r\n\r\n        this.eventAggregator.subscribe(\"gameUpdated\", function (game) {\r\n            console.log(\"game updated.\", game);\r\n            self.game = game;\r\n            self.currentQuestion = game.questions[game.currentQuestionIndex];\r\n        });\r\n\r\n        this.eventAggregator.subscribe(\"answerSelected\", function (statistics) {\r\n            console.log(\"Answer statistic updated.\", statistics);\r\n            self.answerStatistics = statistics;\r\n        });\r\n\r\n        this.eventAggregator.subscribe(\"playerListUpdated\", function (playerList) {\r\n            self.totalPlayers = playerList.length;\r\n        });\r\n\r\n        this.game = {\r\n            questions: [],\r\n        };\r\n\r\n        this.signalrService.verifyConnected(params.gameId)\r\n            .then((game) => {\r\n                self.game = game;\r\n                console.log(\"received game on connected state\", game);\r\n                self.signalrService.getHighscore();\r\n                return game;\r\n            });\r\n    }\r\n\r\n    @computedFrom\r\n    get statsMrs() {\r\n        return this.calculatePercentage(this.answerStatistics.mrs, this.totalPlayers);\r\n    }\r\n\r\n    @computedFrom\r\n    get statsMr() {\r\n        return this.calculatePercentage(this.answerStatistics.mr, this.totalPlayers);\r\n    }\r\n    \r\n    @computedFrom\r\n    get statsBoth() {\r\n        return this.calculatePercentage(this.answerStatistics.both, this.totalPlayers);\r\n    }\r\n\r\n    calculatePercentage(count, total) {\r\n        return Math.floor((count / total) * 100);\r\n    }\r\n}\r\n","import { SignalrService } from 'services/signalr-service';\r\nimport { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { Router } from 'aurelia-router';\r\n\r\n@inject(SignalrService, EventAggregator, Router)\r\nexport class join {\r\n    constructor(signalrService, eventAggregator, router) {\r\n        console.log(\"lobby.js: received signalr service in constructor\")\r\n        this.message = 'Hello World!';\r\n        this.playerlist = [\"Noch keine Spieler\"];\r\n        this.signalrService = signalrService;\r\n        this.eventAggregator = eventAggregator;\r\n        this.router = router;\r\n    }\r\n\r\n    activate(params) {\r\n        var self = this;\r\n        console.log(\"welcome to the lobby\");\r\n\r\n        this.signalrService.verifyConnected(params.gameId)\r\n            .then(() => {\r\n                this.eventAggregator.subscribe('playerListUpdated', (updatedPlayerList) => {\r\n                    console.log(\"we should update playerlist now. yes works\")\r\n                    console.log(updatedPlayerList);\r\n                    self.playerlist = updatedPlayerList;\r\n                })\r\n\r\n                this.eventAggregator.subscribe(\"gameStarted\", (game) => {\r\n                    self.router.navigateToRoute(\"question\", {\r\n                        isModerator: false,\r\n                        game: game,\r\n                    });\r\n                });\r\n            });\r\n    }\r\n}\r\n","import { inject } from 'aurelia-framework';\r\nimport { SignalrService } from 'services/signalr-service';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { Router } from 'aurelia-router';\r\n\r\n@inject(SignalrService, EventAggregator, Router)\r\nexport class question {\r\n    constructor(signalrService, eventAggregator, router) {\r\n        this.message = 'Hello World!';\r\n        this.isModerator = false;\r\n        this.signalrService = signalrService;\r\n        this.eventAggregator = eventAggregator;\r\n        this.router = router;\r\n        this.isLastQuestion = false;\r\n        this.selectedAnswer =  -1;\r\n    }\r\n\r\n    activate(params) {\r\n        var self = this;\r\n        self.gameId = params.gameId;\r\n\r\n        this.signalrService.verifyConnected(params.gameId)\r\n            .then((game) => {\r\n                self.game = game;\r\n                this.eventAggregator.subscribe(\"questionChangeRequested\", function (updatedQuestionIndex) {\r\n                    console.log(\"view should change question now.\");\r\n                    self.questionIndex = updatedQuestionIndex;\r\n                    self.currentQuestion = game.questions[self.questionIndex];\r\n                    self.isLastQuestion = (self.questionIndex + 1 === game.questions.length);\r\n                    self.selectedAnswer = -1;\r\n                });\r\n\r\n                this.eventAggregator.subscribe(\"answerSelected\", function (info) {\r\n                    console.log(\"some user selected answer\", info);\r\n                });\r\n\r\n                this.eventAggregator.subscribe(\"gameEnded\", function () {\r\n                    console.log(\"moderator as finished game.\");\r\n                    self.router.navigateToRoute(\"highscore\", {\r\n                        gameId: self.gameId\r\n                    });\r\n                });\r\n\r\n                console.log(\"question view activated with params\", params);\r\n                this.isModerator = params.isModerator === \"true\";\r\n                this.questionIndex = game.currentQuestionIndex;\r\n                this.currentQuestion = game.questions[this.questionIndex];\r\n                this.isLastQuestion = (self.questionIndex + 1 === game.questions.length);\r\n            });\r\n    }\r\n\r\n    nextQuestion() {\r\n        var self = this;\r\n        this.signalrService.verifyConnected()\r\n            .then(() => self.signalrService.nextQuestion());\r\n    }\r\n\r\n    endGame() {\r\n        var self = this;\r\n        self.signalrService.verifyConnected()\r\n            .then(() => self.signalrService.endGame());\r\n    }\r\n\r\n    selectAnswer(answer) {\r\n        var index = this.questionIndex;\r\n        this.selectedAnswer = answer;\r\n        this.signalrService.selectAnswer(answer, index)\r\n            .then(() => {\r\n                console.log(\"user info: selected answer\" + answer + \"for questionIndex: \" + index);\r\n            });\r\n    }\r\n\r\n\r\n}\r\n","export class GameHubSingleton {\r\n    constructor() {\r\n        this.hub = false;\r\n\r\n    }\r\n\r\n\r\n    createGameHub(username, gameId) {\r\n        if (this.hub) {\r\n            return hub;\r\n        }\r\n\r\n        var hub = $.connection.hub.createHubProxy(\"postsHub\");\r\n        $.connection.hub.qs = 'username=' + username + '&gameId=' + gameId;\r\n        $.connection.hub.logging = true;\r\n\r\n        this.hub = hub;\r\n        return hub;\r\n    }\r\n\r\n    get instance() {\r\n        return this.hub;\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { GameHubSingleton } from 'services/game-hub-singleton';\r\n\r\n@inject(EventAggregator, GameHubSingleton)\r\nexport class SignalrService {\r\n  constructor(eventAggregator, gameHub) {\r\n    console.log(\"signalr service constructor created\")\r\n    this.eventAggregator = eventAggregator;\r\n    this.gameHub = gameHub;\r\n  }\r\n\r\n  activate(params) {\r\n    console.log(\"signalr service activated\")\r\n  }\r\n\r\n  getGameId() {\r\n    var gameId = window.localStorage.getItem(\"currentGame\");\r\n    if (!gameId) {\r\n      throw \"No gameId currently attached to.\";\r\n    }\r\n\r\n    return gameId;\r\n  }\r\n\r\n  verifyConnected(gameId) {\r\n    var username = window.localStorage.getItem(\"username\");\r\n\r\n    if (!gameId) {\r\n      gameId = this.getGameId();\r\n    }\r\n\r\n    var self = this;\r\n\r\n    var promise = new Promise(\r\n      (resolve, reject) => {\r\n\r\n        // already connected hack\r\n        if (!!self.gameHub.instance) {\r\n          resolve(self.game);\r\n          return;\r\n        }\r\n        var gameHub = self.gameHub.createGameHub(username, gameId);\r\n\r\n        gameHub.on('playerListUpdated', function (updatedPlayerlist) {\r\n          console.log(\"Received playerlist\");\r\n          console.log(updatedPlayerlist);\r\n          self.eventAggregator.publish('playerListUpdated', updatedPlayerlist);\r\n        });\r\n\r\n        gameHub.on(\"gameStarted\", function (game) {\r\n          console.log(\"server signalled game was started by moderator\");\r\n          self.eventAggregator.publish('gameStarted', game);\r\n        });\r\n\r\n        gameHub.on(\"questionChangeRequested\", function (response) {\r\n          console.log(\"server signalled question change\", response);\r\n          self.eventAggregator.publish('questionChangeRequested', response);\r\n        });\r\n\r\n        gameHub.on(\"answerSelected\", function (response) {\r\n          console.log(\"user selected answer\", response);\r\n          self.eventAggregator.publish('answerSelected', response);\r\n        });\r\n\r\n        gameHub.on(\"gameEnded\", function (response) {\r\n          console.log(\"moderator has finished the game\", response);\r\n          self.eventAggregator.publish('gameEnded', response);\r\n        });\r\n\r\n        gameHub.on(\"gameUpdated\", function (game) {\r\n          self.game = game;\r\n          resolve(game);\r\n          console.log(\"server sent updated game.\", game);\r\n          self.eventAggregator.publish('gameUpdated', game);\r\n        });\r\n\r\n        gameHub.on(\"highscoreUpdated\", function (highscore) {\r\n          console.log(\"server sent highscore update.\", highscore);\r\n          self.eventAggregator.publish('highscoreUpdated', highscore);\r\n        });\r\n\r\n        $.connection.hub.start().done(function () {\r\n          console.log(\"hub is started now.\");\r\n          gameHub.invoke('updatePlayerList');\r\n        });\r\n\r\n      }\r\n    );\r\n\r\n    return promise;\r\n  }\r\n\r\n  startGame(gameId) {\r\n    var self = this;\r\n    return new Promise((resolve, reject) => {\r\n      console.log(\"triggered game start\");\r\n      self.gameHub.instance.server.startGame(gameId).done(() => {\r\n        console.log(\"game started successfully\");\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  nextQuestion() {\r\n    var self = this;\r\n    console.log(\"moderator switches to next question\");\r\n    return new Promise((resolve, reject) => {\r\n      self.gameHub.instance.server.showNextQuestion(self.game.gameId).done(() => {\r\n        console.log(\"next question request sent.\");\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  selectAnswer(answer, questionIndex) {\r\n    var self = this;\r\n    return new Promise((resolve, reject) => {\r\n      self.gameHub.instance.server.selectAnswer(answer, questionIndex).done(() => {  // todo user info\r\n        console.log(\"selected answer sent to server\", answer, questionIndex);\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  endGame() {\r\n    var self = this;\r\n    return new Promise((resolve, reject) => {\r\n      self.gameHub.instance.server.endGame(self.game.gameId).done(() => {\r\n        console.log(\"request end game on server.\");\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  getHighscore() {\r\n    var self = this;\r\n    self.gameHub.instance.server.getHighscore(self.game.gameId).done(() => {\r\n      console.log(\"request get highscore was received on server.\");\r\n    });\r\n  }\r\n\r\n  updateQuestions(questions) {\r\n    var self = this;\r\n    return new Promise((resolve, reject) => {\r\n      self.gameHub.instance.server.updateQuestions(self.game.gameId, questions).done(() => {\r\n        console.log(\"update questions request was received on server.\");\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n","export function configure(config) {\r\n  //config.globalResources([]);\r\n}\r\n",null,null,null,null,null,null,null,null],"sourceRoot":"..\\src"}